import sys
from Crypto.PublicKey import RSA

def egcd(a, b):
	if a == 0:
		return (b, 0, 1)
	else:
		g, y, x = egcd(b % a, a)
		return (g, x - (b // a) * y, y)


def modinv(a, m):
	g, x, y = egcd(a, m)
	if g != 1:
		return False
	else:
		return x % m
 
n = long(sys.argv[1])
e = long(sys.argv[2]) #65537
p = long(sys.argv[3]) #3
q = long(sys.argv[4]) #1789957098908412138719044217042748169176674100704860619921162070560553824740751022203001708370816648725810395725351462390148334015238715178673513978938003087710071419076294127527745241222929733717529310549920211141437690740284754116093390924265532976544440716043222994454661884080128873898115235596920659412003309469154067328112175248686595171524547211827707996749009616312729646559169905883174398220680813327592853760814632426780416665821064349833103444304406441643774774412552305663920875682358147248712436941568079753403902764459149010221724249724523733593813675605829423073325119855617810323422764876339573639533134510959139776440975765586941743196712288109

d = modinv(e, n - (p + q - 1))
#print(d)
 
key = RSA.construct((n, long(e),long(d),long(p),q))
print(key.exportKey('PEM'))
